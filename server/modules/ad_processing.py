# filename="ad_processing.py"
# server/modules/ad_processing.py (–æ–±–Ω–æ–≤–ª–µ–Ω: —É–¥–∞–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ LOGO, –ø–æ—Ä—Ç :5000 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ BASE_SERVER_URL)

"""
Ad Processing Module / –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

This module handles the processing and generation of unique advertisements with watermarked images.
–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
"""

import time
import random
import os
import shutil
import concurrent.futures
from modules.image_processing import load_logo, uniquify_image
from modules.utils import log_message

# ===== SETTINGS / –ù–ê–°–¢–†–û–ô–ö–ò =====
PHOTOS_PER_AD = 10  # Number of photos per advertisement / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
MAX_ROWS = 5000  # Maximum number of rows in output / –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –≤—ã—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
ALLOWED_EXTENSIONS = ("jpg", "jpeg", "png")  # Allowed image formats / –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
BASE_SERVER_URL = "http://109.172.39.225:5000/"  # Base URL for serving images / –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # Base directory of the project / –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞

def process_ad(i, position_sources, logo, folder_name, local_ready_base, use_rotation, manager):
    """
    Process a single advertisement / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    
    Args:
        i: Advertisement index / –ò–Ω–¥–µ–∫—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        position_sources: List of available files for each position / –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        logo: Logo image for watermarking / –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        folder_name: Source folder name / –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        local_ready_base: Base directory for ready ads / –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        use_rotation: Whether to use rotation for uniquification / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        manager: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Returns:
        List with ad number and URLs or None if failed / –°–ø–∏—Å–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ URL –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # Create unique directory for this ad / –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    ad_dir_name = f"ready_ad_{i+1}_{int(time.time())}"
    ad_dir = os.path.join(local_ready_base, ad_dir_name)
    os.makedirs(ad_dir, exist_ok=True)
    
    # Track used files to ensure uniqueness within one ad / –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
    used_files = set()
    selected_files = []
    
    # Select unique file for each position / –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    for pos_idx, sources in enumerate(position_sources):
        # Filter out already used files / –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        available = [f for f in sources if f not in used_files]
        if not available:
            log_message(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {pos_idx+1} –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {i+1}")
            return None
        # Randomly select a file from available ones / –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        file = random.choice(available)
        selected_files.append(file)
        used_files.add(file)
    
    # Validate that we collected all required photos / –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if len(selected_files) != PHOTOS_PER_AD:
        log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}")
        return None
    
    # Process each selected file and generate URLs / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
    ad_links = []
    for j, orig_file in enumerate(selected_files):
        file_name = f"{j+1}.jpg"
        output_file = os.path.join(ad_dir, file_name)
        # Apply watermark and uniquification / –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é
        uniquify_image(orig_file, output_file, logo, use_rotation)
        # Generate public URL for the image / –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rel_path = os.path.join(folder_name, ad_dir_name, file_name)
        url = f"{BASE_SERVER_URL}{manager}/ready_photos/{rel_path}"
        ad_links.append(url)
    
    # Return result if all links were generated / –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
    if len(ad_links) == PHOTOS_PER_AD:
        return [i + 1, "\n".join(ad_links)]
    else:
        return None

def process_and_generate(folder_name, count, use_rotation, manager):
    """
    Process and generate advertisements with unique images / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    
    Args:
        folder_name: Name of the folder with source images / –ò–º—è –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        count: Number of advertisements to generate / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        use_rotation: Whether to use image rotation for uniquification / –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        manager: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Returns:
        List of generated ads with their URLs / –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏—Ö URL
    """
    start_time = time.time()
    try:
        # Build path to photo cache directory / –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        cache_dir = os.path.join(BASE_DIR, 'data', 'managers', manager, 'photo_cache')
        local_folder = os.path.join(cache_dir, folder_name)
        
        # Check if source folder exists / –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        if not os.path.exists(local_folder):
            error_msg = f"‚ùå –ü–∞–ø–∫–∞ {local_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç."
            log_message(error_msg)
            return []
        
        log_message(f"üìÇ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ {local_folder}")
        
        # Scan folder structure / –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        # Get all subfolders in sorted order / –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        subfolders = sorted([d for d in os.listdir(local_folder) if os.path.isdir(os.path.join(local_folder, d))])
        num_subfolders = len(subfolders)
        
        # Get files from root folder / –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
        root_files = [os.path.join(local_folder, f) for f in os.listdir(local_folder) 
                      if os.path.isfile(os.path.join(local_folder, f)) and f.lower().endswith(ALLOWED_EXTENSIONS)]
        
        # Build list of files for each folder (root + subfolders) / –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ (–∫–æ—Ä–µ–Ω—å + –ø–æ–¥–ø–∞–ø–∫–∏)
        folder_files = [root_files]
        for sub_idx in range(num_subfolders):
            subfolder_path = os.path.join(local_folder, subfolders[sub_idx])
            files = [os.path.join(subfolder_path, f) for f in os.listdir(subfolder_path) 
                    if os.path.isfile(os.path.join(subfolder_path, f)) and f.lower().endswith(ALLOWED_EXTENSIONS)]
            folder_files.append(files)
        # Assign source files to each photo position in the ad / –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        position_sources = []
        has_root = bool(root_files)
        
        for pos in range(PHOTOS_PER_AD):
            if has_root:
                # If root folder has files / –ï—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
                if pos == 0:
                    # First position uses only root files / –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è
                    position_sources.append(folder_files[0])
                else:
                    # Other positions combine root + corresponding subfolder / –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –∫–æ—Ä–µ–Ω—å + —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∞–ø–∫—É
                    idx = min(pos, num_subfolders)
                    combined = folder_files[0] + folder_files[idx]
                    position_sources.append(combined)
            else:
                # If no root files, use only subfolders / –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∞–ø–∫–∏
                if num_subfolders == 0:
                    position_sources.append([])
                else:
                    # Distribute positions cyclically across subfolders / –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ–¥–ø–∞–ø–∫–∞–º
                    idx = (pos % num_subfolders) + 1
                    position_sources.append(folder_files[idx])
        
        # Validate that all positions have files / –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã
        if any(not files for files in position_sources):
            error_msg = f"‚ùå –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤"
            log_message(error_msg)
            return []
        
        # Load logo for watermarking / –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        logo_path = os.path.join(BASE_DIR, 'data', 'managers', manager, 'img', 'Logo.png')
        logo = load_logo(logo_path)
        
        # Prepare output directory / –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        local_ready_base = os.path.join(BASE_DIR, 'data', 'managers', manager, 'ready_photos', folder_name)
        if os.path.exists(local_ready_base):
            log_message(f"üóëÔ∏è —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏")
            shutil.rmtree(local_ready_base)
        os.makedirs(local_ready_base, exist_ok=True)
        log_message(f"–£–¥–∞–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        log_message(f"–Ω–∞—á–∞–ª —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        
        # Initialize results tracking / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = [None] * count
        completed_count = 0
        batch_start = time.time()
        
        # Process ads in parallel using multiprocessing / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
        with concurrent.futures.ProcessPoolExecutor(max_workers=10) as executor:
            # Submit all tasks to the executor / –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            futures = [executor.submit(process_ad, i, position_sources, logo, folder_name, local_ready_base, use_rotation, manager) 
                      for i in range(count)]
            
            # Process completed tasks as they finish / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –º–µ—Ä–µ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result:
                    # Store result at correct index / –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                    idx = result[0] - 1
                    results[idx] = result
                
                completed_count += 1
                
                # Log progress every 10 ads / –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if completed_count % 10 == 0:
                    log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {completed_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—Ä–µ–º—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10: {time.time() - batch_start:.2f} —Å–µ–∫)")
                    batch_start = time.time()
                
                # Log milestone every 100 ads / –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –∫–∞–∂–¥—ã–µ 100 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if completed_count % 100 == 0:
                    log_message(f"{completed_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ")
        
        # Final summary / –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        log_message(f"–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ–±—â–µ–µ –≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫)")
        
        # Filter out failed ads / –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        results = [r for r in results if r]
        
        # Warn if some ads failed / –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å
        if len(results) < count:
            log_message(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {count}")
        
        return results
    
    except Exception as e:
        # Handle any errors during processing / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        log_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return []