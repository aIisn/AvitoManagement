# server/modules/google_sheets.py (–æ–±–Ω–æ–≤–ª–µ–Ω: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ __file__)

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
import os
from modules.ad_processing import process_and_generate
from modules.utils import log_message

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'service_account.json')
creds = ServiceAccountCredentials.from_json_keyfile_name(config_path, scope)
client = gspread.authorize(creds)

spreadsheet = client.open_by_key("1TpLi_ck_HCXmXTFRkJcrOFAee0RhG5O1WxCxOkHYck4")

def safe_get_worksheets(spreadsheet, retries=5, delay=3):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for i in range(retries):
        try:
            sheets = spreadsheet.worksheets()
            return sheets
        except gspread.exceptions.APIError as e:
            log_message(f"–û—à–∏–±–∫–∞ API: {e}, –ø–æ–ø—ã—Ç–∫–∞ {i+1} –∏–∑ {retries}")
            time.sleep(delay)
    log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

def run_program(sheet):
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ª–∏—Å—Ç–∞
    start_time = time.time()
    try:
        values = sheet.batch_get(["C2", "C4", "C6", "C8"])
        count = int(values[0][0][0]) if values[0] and values[0][0] else None
        flag = values[1][0][0] if values[1] and values[1][0] else None
        folder_name = values[2][0][0] if values[2] and values[2][0] else None
        rotate_value = values[3][0][0] if values[3] and values[3][0] else "–î–∞"
    except Exception as e:
        log_message(f"‚ùå [{sheet.title}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è—á–µ–µ–∫ C2, C4, C6, C8: {e}")
        return
    if not count:
        log_message(f"‚ùå [{sheet.title}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ C2")
        return
    if not folder_name:
        log_message(f"‚ùå [{sheet.title}] –ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤ C6")
        return
    if not flag or flag.strip().lower() != "–¥–∞":
        log_message(f"‚è∏ [{sheet.title}] –§–ª–∞–≥ '–î–∞' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
        return
    use_rotation = rotate_value.strip().lower() == "–¥–∞"
    folder_name = folder_name.strip('/')
    log_message(f"üìÇ [{sheet.title}] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—É—Ç—å: {folder_name}")
    log_message(f"üîÑ [{sheet.title}] –í—Ä–∞—â–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏: {'–î–∞' if use_rotation else '–ù–µ—Ç'}")
    if not process_and_generate(sheet, folder_name, count, use_rotation):
        return
    sheet.update(values=[["–ù–µ—Ç"]], range_name="C4")
    log_message(f"‚úÖ [{sheet.title}] —Ä–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    log_message(f"–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫)")