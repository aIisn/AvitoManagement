# server/main.py
# Main Flask Application Server / –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# Updated: removed global BLOCKED_IPS, IP_REQUEST_COUNTS, REQUEST_TIMEOUT, RATE_LIMIT, removed clean_blocked_ips call in security_middleware
# –û–±–Ω–æ–≤–ª—ë–Ω: —É–¥–∞–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ BLOCKED_IPS, IP_REQUEST_COUNTS, REQUEST_TIMEOUT, RATE_LIMIT, —É–¥–∞–ª–µ–Ω –≤—ã–∑–æ–≤ clean_blocked_ips –≤ security_middleware

"""
Avito Management Server / –°–µ—Ä–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Avito

Flask-based web server for managing advertisement photo processing and generation.
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Flask –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π.

Features / –§—É–Ω–∫—Ü–∏–∏:
- Manager management (create, rename, delete) / –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
- Photo upload and storage / –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
- Image uniquification and watermarking / –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
- Ready advertisement link generation / –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
- Security middleware / –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import time
import threading
from flask import Flask, request, jsonify, send_from_directory, abort, Response
import logging
from werkzeug.exceptions import BadRequest
import os
import shutil
from modules.utils import get_timestamp, log_message, is_suspicious_request, allowed_file
from modules.ad_processing import process_and_generate, PHOTOS_PER_AD
from modules.user_management import (
    register_user, verify_user_email, authenticate_user, authenticate_user_with_session,
    resend_verification_code, get_user_by_email, get_user_by_username
)
from modules.auth_middleware import (
    require_auth, get_current_user, is_authenticated, 
    api_logout, api_get_user_sessions, cleanup_expired_sessions
)
from modules.redis_manager import (
    initialize_redis, shutdown_redis, get_redis_info, 
    cache_set, cache_get, cache_delete, clear_all_cache
)

# ===== SETTINGS / –ù–ê–°–¢–†–û–ô–ö–ò =====
CHECK_INTERVAL = 30  # Interval for periodic checks in seconds / –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BASE_DIR = os.path.dirname(__file__)  # Base server directory / –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞
MANAGERS_DIR = os.path.join(BASE_DIR, 'data', 'managers')  # Managers data directory / –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
LOG_FILE = os.path.join(BASE_DIR, 'logs', 'main.txt')  # Main log file path / –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–æ–≥-—Ñ–∞–π–ª—É
BASE_SERVER_URL = "http://109.172.39.225:5000/"  # Public server URL / –ü—É–±–ª–∏—á–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
CLIENT_DIR = os.path.join(BASE_DIR, '..', 'client')  # Client files directory / –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞

# ===== SECURITY / –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====
ALLOWED_USER_AGENTS = ['Mozilla/5.0', 'Chrome/', 'Safari/', 'Firefox/', 'Edge/']  # Allowed browser signatures / –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
# ==================================

# Initialize Flask application / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
logging.basicConfig(level=logging.WARNING)

@app.before_request
def security_middleware():
    """
    Security middleware that runs before each request / –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    
    Performs / –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    - Suspicious request detection / –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    - CORS headers setup for API routes / –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
    - OPTIONS request handling / –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # Block suspicious requests / –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if is_suspicious_request():
        abort(403)
    
    # Setup CORS for API routes / –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if request.path.startswith('/api/'):
        response = Response()
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        if request.method == 'OPTIONS':
            return response

@app.route('/api/count_ready', methods=['GET'])
@require_auth
def count_ready():
    manager = request.args.get('manager')
    if not manager:
        return jsonify({'error': 'Manager required'}), 400
    try:
        ready_base = os.path.join(MANAGERS_DIR, manager, 'ready_photos')
        if not os.path.exists(ready_base):
            return jsonify({'counts': {}}), 200
        categories = [d for d in os.listdir(ready_base) if os.path.isdir(os.path.join(ready_base, d))]
        counts = {}
        for cat in categories:
            cat_path = os.path.join(ready_base, cat)
            counts[cat] = len([d for d in os.listdir(cat_path) if os.path.isdir(os.path.join(cat_path, d))])
        return jsonify({'counts': counts})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.errorhandler(BadRequest)
def handle_bad_request(e):
    """
    Error handler for malformed HTTP requests / –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        e: BadRequest exception / –ò—Å–∫–ª—é—á–µ–Ω–∏–µ BadRequest
    
    Returns:
        tuple: Error message and 400 status code / –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 400
    """
    client_ip = request.remote_addr
    log_message(f"üö´ –ü–ª–æ—Ö–æ–π HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç {client_ip} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
    return 'Bad Request', 400

@app.route('/api/get_links', methods=['GET'])
@require_auth
def get_links():
    manager = request.args.get('manager')
    category = request.args.get('category')
    if not manager or not category:
        return jsonify({'error': 'Manager and category required'}), 400
    try:
        ready_base = os.path.join(MANAGERS_DIR, manager, 'ready_photos', category)
        if not os.path.exists(ready_base):
            return jsonify({'error': 'Category not found'}), 404
        ad_dirs = sorted([d for d in os.listdir(ready_base) if os.path.isdir(os.path.join(ready_base, d))])
        results = []
        for idx, ad_dir in enumerate(ad_dirs, 1):
            ad_path = os.path.join(ready_base, ad_dir)
            files = sorted([f for f in os.listdir(ad_path) if f.lower().endswith('.jpg')])
            if len(files) == PHOTOS_PER_AD:
                links = []
                for file in files:
                    rel_path = os.path.join(category, ad_dir, file)
                    url = f"{BASE_SERVER_URL}{manager}/ready_photos/{rel_path}"
                    links.append(url)
                results.append([idx, "\n".join(links)])
        return jsonify({'success': True, 'results': results})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/logs', methods=['GET'])
@require_auth
def get_logs():
    try:
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                lines = f.readlines()
            last_20 = lines[-20:] if len(lines) > 20 else lines
            return jsonify({'logs': [line.strip() for line in last_20]})
        return jsonify({'logs': []})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/managers', methods=['GET'])
@require_auth
def list_managers():
    try:
        managers = [d for d in os.listdir(MANAGERS_DIR) if os.path.isdir(os.path.join(MANAGERS_DIR, d))]
        return jsonify(managers)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/upload_logo', methods=['POST'])
@require_auth
def upload_logo():
    """
    Upload logo image for a manager / –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Form data / –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:
        manager: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logo: Logo file (jpg, jpeg, png) / –§–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞ (jpg, jpeg, png)
    
    Returns:
        JSON: Success status or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    manager = request.form.get('manager')
    if not manager:
        return jsonify({'error': 'Manager required'}), 400
    if 'logo' not in request.files:
        return jsonify({'error': 'No logo file'}), 400
    file = request.files['logo']
    if file and allowed_file(file.filename):
        img_dir = os.path.join(MANAGERS_DIR, manager, 'img')
        os.makedirs(img_dir, exist_ok=True)
        file_path = os.path.join(img_dir, 'Logo.png')
        file.save(file_path)
        log_message(f"üì§ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager}'")
        return jsonify({'success': True})
    return jsonify({'error': 'Invalid file'}), 400

@app.route('/api/create-manager', methods=['POST'])
@require_auth
def create_manager():
    """
    Create a new manager with directory structure / –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    
    JSON body:
        name: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Creates directories / –°–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
    - photo_cache: For uploaded source photos / –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    - ready_photos: For processed photos / –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    - img: For logo / –î–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
    
    Returns:
        JSON: Success status or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        name = request.json.get('name')
        if not name:
            return jsonify({'error': 'Name required'}), 400
        
        # Create manager directory structure / –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_path = os.path.join(MANAGERS_DIR, name)
        os.makedirs(manager_path, exist_ok=True)
        os.makedirs(os.path.join(manager_path, 'photo_cache'), exist_ok=True)
        os.makedirs(os.path.join(manager_path, 'ready_photos'), exist_ok=True)
        os.makedirs(os.path.join(manager_path, 'img'), exist_ok=True)  # Logo directory / –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
        
        log_message(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{name}'")
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/rename-manager', methods=['POST'])
@require_auth
def rename_manager():
    """
    Rename an existing manager / –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    JSON body:
        old_name: Current manager name / –¢–µ–∫—É—â–µ–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        new_name: New manager name / –ù–æ–≤–æ–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Returns:
        JSON: Success status or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        old_name = request.json.get('old_name')
        new_name = request.json.get('new_name')
        if not old_name or not new_name:
            return jsonify({'error': 'Old and new names required'}), 400
        
        old_path = os.path.join(MANAGERS_DIR, old_name)
        new_path = os.path.join(MANAGERS_DIR, new_name)
        
        # Validate paths / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏
        if not os.path.exists(old_path):
            return jsonify({'error': 'Manager not found'}), 404
        if os.path.exists(new_path):
            return jsonify({'error': 'New name already exists'}), 400
        
        os.rename(old_path, new_path)
        log_message(f"üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'")
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/delete-manager', methods=['POST'])
@require_auth
def delete_manager():
    """
    Delete a manager and all associated data / –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    JSON body:
        name: Manager name to delete / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Returns:
        JSON: Success status or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        name = request.json.get('name')
        if not name:
            return jsonify({'error': 'Name required'}), 400
        
        path = os.path.join(MANAGERS_DIR, name)
        if not os.path.exists(path):
            return jsonify({'error': 'Manager not found'}), 404
        
        # Remove entire manager directory / –£–¥–∞–ª–∏—Ç—å –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        shutil.rmtree(path)
        log_message(f"üóëÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä '{name}' —É–¥–∞–ª–µ–Ω")
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/list', methods=['GET'])
@require_auth
def list_files():
    manager = request.args.get('manager')
    dir_type = request.args.get('dir')
    if not manager or dir_type not in ['photo_cache', 'ready_photos']:
        return jsonify({'error': 'Manager and valid directory required'}), 400
    base_dir = os.path.join(MANAGERS_DIR, manager, dir_type)
    path = request.args.get('path', '')
    full_path = os.path.normpath(os.path.join(base_dir, path))
    if not full_path.startswith(base_dir) or not os.path.exists(full_path):
        return jsonify({'error': 'Invalid path'}), 400
    items = []
    for item in sorted(os.listdir(full_path)):
        item_path = os.path.join(full_path, item)
        rel_path = os.path.relpath(item_path, base_dir)
        item_type = 'dir' if os.path.isdir(item_path) else 'file'
        items.append({'name': item, 'type': item_type, 'path': rel_path})
    return jsonify({'children': items})

@app.route('/api/delete', methods=['POST'])
@require_auth
def delete_item():
    data = request.json
    manager = data.get('manager')
    dir_type = data.get('dir')
    if not manager or dir_type not in ['photo_cache', 'ready_photos']:
        return jsonify({'error': 'Manager and valid directory required'}), 400
    base_dir = os.path.join(MANAGERS_DIR, manager, dir_type)
    path = data.get('path')
    full_path = os.path.normpath(os.path.join(base_dir, path))
    if not full_path.startswith(base_dir) or not os.path.exists(full_path) or full_path == base_dir:
        return jsonify({'error': 'Invalid path or cannot delete root'}), 400
    try:
        if os.path.isdir(full_path):
            shutil.rmtree(full_path)
        else:
            os.remove(full_path)
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/create-folder-structure', methods=['POST'])
@require_auth
def create_folder_structure():
    """
    Create folder structure for photo positions / –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    
    JSON body:
        manager: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        category: Category name / –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        positions: List of position folder names / –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø–∞–ø–æ–∫ –ø–æ–∑–∏—Ü–∏–π
    
    Returns:
        JSON: Success status with created folders or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    data = request.json
    manager = data.get('manager')
    category = data.get('category')
    positions = data.get('positions', [])
    
    if not manager or not category:
        return jsonify({'error': 'Manager and category required'}), 400
    
    try:
        # Create category directory / –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cache_dir = os.path.join(MANAGERS_DIR, manager, 'photo_cache')
        category_path = os.path.join(cache_dir, category)
        os.makedirs(category_path, exist_ok=True)
        
        # Create position folders / –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –ø–æ–∑–∏—Ü–∏–π
        created_folders = []
        for pos in positions:
            pos_path = os.path.join(category_path, pos)
            os.makedirs(pos_path, exist_ok=True)
            created_folders.append(pos)
        log_message(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager}', –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {', '.join(created_folders)}")
        return jsonify({'success': True, 'created': created_folders})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/upload', methods=['POST'])
@require_auth
def upload_files():
    """
    Upload multiple photo files to a specific position / –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ñ–∞–π–ª–æ–≤ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    
    Form data / –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:
        manager: Manager name / –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        category: Category name / –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        position: Position folder name / –ò–º—è –ø–∞–ø–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
        files: Multiple file uploads / –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    Returns:
        JSON: Success status with uploaded filenames or error / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ —Å –∏–º–µ–Ω–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    manager = request.form.get('manager')
    category = request.form.get('category')
    position = request.form.get('position')
    
    if not manager or not category or not position:
        return jsonify({'error': 'Manager, category and position required'}), 400
    
    # Create target directory / –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_path = os.path.join(MANAGERS_DIR, manager, 'photo_cache', category, position)
    os.makedirs(base_path, exist_ok=True)
    
    # Upload files / –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
    uploaded = []
    for file in request.files.getlist('files'):
        if file and allowed_file(file.filename):
            filename = file.filename
            file.save(os.path.join(base_path, filename))
            uploaded.append(filename)
    log_message(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager}' –≤ {category}/{position}: {', '.join(uploaded)}")
    return jsonify({'success': True, 'uploaded': uploaded})

@app.route('/api/uniquify', methods=['POST'])
@require_auth
def uniquify():
    data = request.json
    manager = data.get('manager')
    folder_name = data.get('folder_name')
    count = data.get('count')
    use_rotation = data.get('use_rotation', True)
    if not manager or not folder_name or not count:
        return jsonify({'error': 'Manager, folder_name and count required'}), 400
    try:
        results = process_and_generate(folder_name, count, use_rotation, manager)
        return jsonify({'success': True, 'results': results})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# ============================================================================
# API ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò / USER MANAGEMENT API ENDPOINTS
# ============================================================================

@app.route('/api/auth/register', methods=['POST'])
def api_register():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Register new user
    
    JSON body:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Username
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / User's email
        password: –ü–∞—Ä–æ–ª—å / Password
    
    Returns:
        JSON: Success status and message / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        data = request.json
        username = data.get('username', '').strip()
        email = data.get('email', '').strip()
        password = data.get('password', '')
        
        if not username or not email or not password:
            return jsonify({'success': False, 'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'}), 400
        
        success, message = register_user(username, email, password)
        
        if success:
            log_message(f"üìù –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username} ({email})")
            return jsonify({'success': True, 'message': message})
        else:
            return jsonify({'success': False, 'error': message}), 400
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/verify', methods=['POST'])
def api_verify_email():
    """
    –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Verify user's email
    
    JSON body:
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / User's email
        code: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Verification code
    
    Returns:
        JSON: Success status and message / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        data = request.json
        email = data.get('email', '').strip()
        code = data.get('code', '').strip()
        
        if not email or not code:
            return jsonify({'success': False, 'error': 'Email –∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        success, message = verify_user_email(email, code)
        
        if success:
            log_message(f"‚úÖ Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {email}")
            return jsonify({'success': True, 'message': message})
        else:
            return jsonify({'success': False, 'error': message}), 400
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/login', methods=['POST'])
def api_login():
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / User authentication
    
    JSON body:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email / Username or email
        password: –ü–∞—Ä–æ–ª—å / Password
    
    Returns:
        JSON: Success status, message, user data and session token / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
    """
    try:
        data = request.json
        username = data.get('username', '').strip()
        password = data.get('password', '')
        
        if not username or not password:
            return jsonify({'success': False, 'error': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        success, message, user_data, session_token = authenticate_user_with_session(username, password)
        
        if success:
            log_message(f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user_data['username']}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º —Å–µ—Å—Å–∏–∏ / Create response with session token
            response = jsonify({
                'success': True, 
                'message': message,
                'user': user_data,
                'session_token': session_token
            })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º —Å–µ—Å—Å–∏–∏ / Set cookie with session token
            response.set_cookie(
                'session_token', 
                session_token, 
                max_age=24*60*60,  # 24 —á–∞—Å–∞ / 24 hours
                httponly=True,     # –ó–∞—â–∏—Ç–∞ –æ—Ç XSS / XSS protection
                secure=False,      # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True / Should be True in production
                samesite='Lax'     # CSRF –∑–∞—â–∏—Ç–∞ / CSRF protection
            )
            
            return response
        else:
            return jsonify({'success': False, 'error': message}), 401
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/resend-code', methods=['POST'])
def api_resend_verification_code():
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Resend verification code
    
    JSON body:
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / User's email
    
    Returns:
        JSON: Success status and message / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        data = request.json
        email = data.get('email', '').strip()
        
        if not email:
            return jsonify({'success': False, 'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        success, message = resend_verification_code(email)
        
        if success:
            log_message(f"üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {email}")
            return jsonify({'success': True, 'message': message})
        else:
            return jsonify({'success': False, 'error': message}), 400
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/check-email', methods=['POST'])
def api_check_email():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email / Check if email exists
    
    JSON body:
        email: Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ / Email to check
    
    Returns:
        JSON: Email status / –°—Ç–∞—Ç—É—Å email
    """
    try:
        data = request.json
        email = data.get('email', '').strip()
        
        if not email:
            return jsonify({'success': False, 'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        user = get_user_by_email(email)
        
        if user:
            return jsonify({
                'success': True,
                'exists': True,
                'verified': user['verified'],
                'username': user['username']
            })
        else:
            return jsonify({
                'success': True,
                'exists': False
            })
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/logout', methods=['POST'])
@require_auth
def api_logout():
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã / Logout
    
    Returns:
        JSON: Success status and message / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ / Get session token
        auth_header = request.headers.get('Authorization')
        session_token = None
        
        if auth_header and auth_header.startswith('Bearer '):
            session_token = auth_header[7:]
        else:
            session_token = request.cookies.get('session_token')
        
        if not session_token:
            return jsonify({'success': False, 'error': '–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã / Logout
        success, message = api_logout(session_token)
        
        if success:
            log_message(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {get_current_user()['username']}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∏ —É–¥–∞–ª—è–µ–º cookie / Create response and remove cookie
            response = jsonify({
                'success': True,
                'message': message
            })
            response.set_cookie('session_token', '', expires=0)
            
            return response
        else:
            return jsonify({'success': False, 'error': message}), 400
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/auth/me', methods=['GET'])
@require_auth
def api_get_current_user():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Get current user data
    
    Returns:
        JSON: Current user data / –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        current_user = get_current_user()
        
        if current_user:
            return jsonify({
                'success': True,
                'user': {
                    'id': current_user['user_id'],
                    'username': current_user['username'],
                    'email': current_user['email'],
                    'session_created': current_user['created_at'],
                    'last_activity': current_user['last_activity']
                }
            })
        else:
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

# ============================================================================
# REDIS MANAGEMENT API ENDPOINTS / API –≠–ù–î–ü–û–ò–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø REDIS
# ============================================================================

@app.route('/api/redis/info', methods=['GET'])
@require_auth
def api_redis_info():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis / Get Redis information
    
    Returns:
        JSON: Redis server information / –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ Redis
    """
    try:
        redis_info = get_redis_info()
        return jsonify({
            'success': True,
            'redis': redis_info
        })
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/redis/cache/clear', methods=['POST'])
@require_auth
def api_clear_cache():
    """
    –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ Redis / Clear all Redis cache
    
    Returns:
        JSON: Success status / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
    """
    try:
        success = clear_all_cache()
        if success:
            log_message("üßπ –ö—ç—à Redis –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return jsonify({
                'success': True,
                'message': '–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à'
            }), 500
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/redis/cache/set', methods=['POST'])
@require_auth
def api_cache_set():
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à Redis / Set value in Redis cache
    
    JSON body:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        value: Value to cache / –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        ttl: Time to live in seconds (optional) / –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        prefix: Key prefix (optional) / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        JSON: Success status / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
    """
    try:
        data = request.json
        key = data.get('key')
        value = data.get('value')
        ttl = data.get('ttl')
        prefix = data.get('prefix', 'cache')
        
        if not key or value is None:
            return jsonify({'success': False, 'error': '–ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        success = cache_set(key, value, ttl, prefix)
        if success:
            return jsonify({
                'success': True,
                'message': '–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'
            }), 500
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—ç—à–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/redis/cache/get', methods=['GET'])
@require_auth
def api_cache_get():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ Redis / Get value from Redis cache
    
    Query parameters:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        prefix: Key prefix (optional) / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        JSON: Cached value or error / –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        key = request.args.get('key')
        prefix = request.args.get('prefix', 'cache')
        
        if not key:
            return jsonify({'success': False, 'error': '–ö–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        value = cache_get(key, prefix)
        if value is not None:
            return jsonify({
                'success': True,
                'value': value
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ'
            }), 404
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/redis/cache/delete', methods=['DELETE'])
@require_auth
def api_cache_delete():
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ Redis / Delete value from Redis cache
    
    JSON body:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        prefix: Key prefix (optional) / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        JSON: Success status / –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
    """
    try:
        data = request.json
        key = data.get('key')
        prefix = data.get('prefix', 'cache')
        
        if not key:
            return jsonify({'success': False, 'error': '–ö–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        success = cache_delete(key, prefix)
        if success:
            return jsonify({
                'success': True,
                'message': '–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞'
            }), 500
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")
        return jsonify({'success': False, 'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/<manager>/photo_cache/<path:path>')
def serve_photo_cache(manager, path):
    return send_from_directory(os.path.join(MANAGERS_DIR, manager, 'photo_cache'), path)

@app.route('/<manager>/ready_photos/<path:path>')
def serve_ready_photos(manager, path):
    return send_from_directory(os.path.join(MANAGERS_DIR, manager, 'ready_photos'), path)

@app.route('/')
def index():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã / Check authorization for main page
    session_token = request.cookies.get('session_token')
    
    if not session_token:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Redirect to auth page
        return send_from_directory(CLIENT_DIR, 'auth.html')
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é / Validate session
    from modules.auth_middleware import validate_session_token
    is_valid, session_data = validate_session_token(session_token, update_activity=False)
    
    if not is_valid:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Redirect to auth page
        return send_from_directory(CLIENT_DIR, 'auth.html')
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É / User is authenticated, show main page
    return send_from_directory(CLIENT_DIR, 'index.html')

@app.route('/<path:filename>')
def static_files(filename):
    if filename.endswith('.css') or filename.endswith('.js') or filename.endswith('.html'):
        return send_from_directory(CLIENT_DIR, filename)
    abort(404)

def cleanup_sessions_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π / Periodic cleanup of expired sessions"""
    while True:
        try:
            time.sleep(CHECK_INTERVAL * 60)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç / Every 30 minutes
            removed_count = cleanup_expired_sessions()
            if removed_count > 0:
                log_message(f"üßπ –û—á–∏—â–µ–Ω–æ {removed_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

if __name__ == "__main__":
    # Create managers directory if it doesn't exist / –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(MANAGERS_DIR, exist_ok=True)
    
    # Initialize Redis connection / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_initialized = initialize_redis()
    if redis_initialized:
        log_message("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        log_message("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Redis")
        log_message("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: sudo apt install redis-server && sudo systemctl start redis-server")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π / Start background session cleanup task
    cleanup_thread = threading.Thread(target=cleanup_sessions_periodically, daemon=True)
    cleanup_thread.start()
    
    log_message("‚è≥ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å Redis-—Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—è–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å Flask —Å–µ—Ä–≤–µ—Ä / Start Flask server
        app.run(host='0.0.0.0', port=5000, threaded=True)
    except KeyboardInterrupt:
        log_message("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    finally:
        # Shutdown Redis connection / –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        shutdown_redis()
        log_message("üîå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")