# server/modules/google_sheets.py
# Google Sheets Integration Module / –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets
# Updated: absolute path to config based on __file__ / –û–±–Ω–æ–≤–ª—ë–Ω: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ __file__

"""
Google Sheets Module / –ú–æ–¥—É–ª—å Google Sheets

This module handles Google Sheets API integration for managing advertisement generation tasks.
–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Sheets API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
"""

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
import os
from modules.ad_processing import process_and_generate
from modules.utils import log_message

# Google Sheets authorization / –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'service_account.json')
creds = ServiceAccountCredentials.from_json_keyfile_name(config_path, scope)
client = gspread.authorize(creds)

# Open target spreadsheet / –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
spreadsheet = client.open_by_key("1TpLi_ck_HCXmXTFRkJcrOFAee0RhG5O1WxCxOkHYck4")

def safe_get_worksheets(spreadsheet, retries=5, delay=3):
    """
    Safely get worksheets list with retries / –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    Args:
        spreadsheet: Google Sheets spreadsheet object / –û–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã Google Sheets
        retries: Number of retry attempts / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        delay: Delay between retries in seconds / –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        list: List of worksheet objects / –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–∏—Å—Ç–æ–≤
    
    Raises:
        Exception: If unable to get worksheets after all retries / –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    """
    for i in range(retries):
        try:
            sheets = spreadsheet.worksheets()
            return sheets
        except gspread.exceptions.APIError as e:
            log_message(f"–û—à–∏–±–∫–∞ API: {e}, –ø–æ–ø—ã—Ç–∫–∞ {i+1} –∏–∑ {retries}")
            time.sleep(delay)
    error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
    log_message(error_msg)
    raise Exception(error_msg)

def run_program(sheet):
    """
    Run the advertisement generation program for a specific worksheet / –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    
    Args:
        sheet: Google Sheets worksheet object / –û–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞ Google Sheets
    
    The function reads configuration from cells C2, C4, C6, C8:
    - C2: Count of ads to generate / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - C4: "–î–∞"/"–ù–µ—Ç" flag to enable processing / –§–ª–∞–≥ "–î–∞"/"–ù–µ—Ç" –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - C6: Folder name with source photos / –ò–º—è –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    - C8: Rotation flag (default "–î–∞") / –§–ª–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–î–∞")
    
    –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —è—á–µ–µ–∫ C2, C4, C6, C8:
    - C2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - C4: –§–ª–∞–≥ "–î–∞"/"–ù–µ—Ç" –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - C6: –ò–º—è –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    - C8: –§–ª–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–î–∞")
    """
    start_time = time.time()
    try:
        # Read configuration cells / –ß–∏—Ç–∞–µ–º —è—á–µ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        values = sheet.batch_get(["C2", "C4", "C6", "C8"])
        count = int(values[0][0][0]) if values[0] and values[0][0] else None
        flag = values[1][0][0] if values[1] and values[1][0] else None
        folder_name = values[2][0][0] if values[2] and values[2][0] else None
        rotate_value = values[3][0][0] if values[3] and values[3][0] else "–î–∞"
    except Exception as e:
        log_message(f"‚ùå [{sheet.title}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è—á–µ–µ–∫ C2, C4, C6, C8: {e}")
        return
    
    # Validate required parameters / –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not count:
        log_message(f"‚ùå [{sheet.title}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ C2")
        return
    if not folder_name:
        log_message(f"‚ùå [{sheet.title}] –ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤ C6")
        return
    if not flag or flag.strip().lower() != "–¥–∞":
        log_message(f"‚è∏ [{sheet.title}] –§–ª–∞–≥ '–î–∞' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.")
        return
    
    # Parse rotation flag / –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞
    use_rotation = rotate_value.strip().lower() == "–¥–∞"
    folder_name = folder_name.strip('/')
    log_message(f"üìÇ [{sheet.title}] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—É—Ç—å: {folder_name}")
    log_message(f"üîÑ [{sheet.title}] –í—Ä–∞—â–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏: {'–î–∞' if use_rotation else '–ù–µ—Ç'}")
    # Process and generate ads / –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if not process_and_generate(sheet, folder_name, count, use_rotation):
        return
    
    # Reset flag after successful processing / –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    sheet.update(values=[["–ù–µ—Ç"]], range_name="C4")
    log_message(f"‚úÖ [{sheet.title}] —Ä–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    log_message(f"–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—Ä–µ–º—è: {time.time() - start_time:.2f} —Å–µ–∫)")