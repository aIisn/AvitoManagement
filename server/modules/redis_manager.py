# filename="redis_manager.py"
# Redis Manager Module / –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis
# Module for Redis connection management, session storage, and caching

import redis
import json
import logging
from typing import Dict, Optional, Any, Union
from datetime import datetime, timedelta
import os

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø REDIS / REDIS CONFIGURATION
# ============================================================================

# Redis connection settings / –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
REDIS_CONFIG = {
    'host': 'localhost',
    'port': 6379,
    'db': 0,
    'password': None,  # Set password if Redis requires authentication
    'decode_responses': True,
    'socket_connect_timeout': 5,
    'socket_timeout': 5,
    'retry_on_timeout': True,
    'health_check_interval': 30
}

# Redis key prefixes / –ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–ª—é—á–µ–π Redis
REDIS_PREFIXES = {
    'session': 'avito:session:',
    'user_sessions': 'avito:user_sessions:',
    'cache': 'avito:cache:',
    'image_processing': 'avito:img:',
    'api_cache': 'avito:api:',
    'temp_data': 'avito:temp:'
}

# Cache TTL settings (in seconds) / –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTL –∫—ç—à–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CACHE_TTL = {
    'session': 24 * 60 * 60,  # 24 hours
    'api_response': 5 * 60,   # 5 minutes
    'image_processing': 60 * 60,  # 1 hour
    'temp_data': 10 * 60,     # 10 minutes
    'user_data': 30 * 60      # 30 minutes
}

# ============================================================================
# REDIS CONNECTION MANAGER / –ú–ï–ù–ï–î–ñ–ï–† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö REDIS
# ============================================================================

class RedisManager:
    """Redis connection manager with fallback support / –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback"""
    
    def __init__(self):
        self.redis_client = None
        self.is_connected = False
        self.connection_errors = 0
        self.max_connection_errors = 5
        
    def connect(self) -> bool:
        """
        Establish Redis connection / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        
        Returns:
            bool: True if connected successfully / True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.redis_client = redis.Redis(**REDIS_CONFIG)
            # Test connection / –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.redis_client.ping()
            self.is_connected = True
            self.connection_errors = 0
            logging.info("‚úÖ Redis connection established successfully")
            return True
        except Exception as e:
            self.is_connected = False
            self.connection_errors += 1
            logging.warning(f"‚ö†Ô∏è Redis connection failed: {e}")
            return False
    
    def disconnect(self):
        """Close Redis connection / –ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        if self.redis_client:
            try:
                self.redis_client.close()
                self.is_connected = False
                logging.info("üîå Redis connection closed")
            except Exception as e:
                logging.error(f"‚ùå Error closing Redis connection: {e}")
    
    def is_available(self) -> bool:
        """
        Check if Redis is available / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        
        Returns:
            bool: True if Redis is available / True –µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.is_connected or self.connection_errors >= self.max_connection_errors:
            return False
        
        try:
            self.redis_client.ping()
            return True
        except Exception:
            self.connection_errors += 1
            return False
    
    def get_client(self) -> Optional[redis.Redis]:
        """
        Get Redis client / –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Redis
        
        Returns:
            Optional[redis.Redis]: Redis client or None / –ö–ª–∏–µ–Ω—Ç Redis –∏–ª–∏ None
        """
        if self.is_available():
            return self.redis_client
        return None

# Global Redis manager instance / –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Redis
redis_manager = RedisManager()

# ============================================================================
# SESSION MANAGEMENT WITH REDIS / –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò –° REDIS
# ============================================================================

def store_session_redis(session_token: str, session_data: Dict, ttl: int = None) -> bool:
    """
    Store session data in Redis / –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Redis
    
    Args:
        session_token: Session token / –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        session_data: Session data / –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ttl: Time to live in seconds / –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        bool: True if stored successfully / True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        key = f"{REDIS_PREFIXES['session']}{session_token}"
        ttl = ttl or CACHE_TTL['session']
        
        # Store session data / –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        client.setex(key, ttl, json.dumps(session_data, ensure_ascii=False))
        
        # Add to user sessions set / –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = session_data.get('user_id')
        if user_id:
            user_sessions_key = f"{REDIS_PREFIXES['user_sessions']}{user_id}"
            client.sadd(user_sessions_key, session_token)
            client.expire(user_sessions_key, ttl)
        
        return True
    except Exception as e:
        logging.error(f"‚ùå Error storing session in Redis: {e}")
        return False

def get_session_redis(session_token: str) -> Optional[Dict]:
    """
    Get session data from Redis / –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
    
    Args:
        session_token: Session token / –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
    
    Returns:
        Optional[Dict]: Session data or None / –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
    """
    if not redis_manager.is_available():
        return None
    
    try:
        client = redis_manager.get_client()
        if not client:
            return None
        
        key = f"{REDIS_PREFIXES['session']}{session_token}"
        data = client.get(key)
        
        if data:
            return json.loads(data)
        return None
    except Exception as e:
        logging.error(f"‚ùå Error getting session from Redis: {e}")
        return None

def delete_session_redis(session_token: str) -> bool:
    """
    Delete session from Redis / –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Redis
    
    Args:
        session_token: Session token / –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
    
    Returns:
        bool: True if deleted successfully / True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        key = f"{REDIS_PREFIXES['session']}{session_token}"
        
        # Get session data to find user_id / –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ user_id
        session_data = get_session_redis(session_token)
        
        # Delete session / –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        client.delete(key)
        
        # Remove from user sessions set / –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞–±–æ—Ä–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_data and 'user_id' in session_data:
            user_id = session_data['user_id']
            user_sessions_key = f"{REDIS_PREFIXES['user_sessions']}{user_id}"
            client.srem(user_sessions_key, session_token)
        
        return True
    except Exception as e:
        logging.error(f"‚ùå Error deleting session from Redis: {e}")
        return False

def delete_user_sessions_redis(user_id: str) -> bool:
    """
    Delete all sessions for a user from Redis / –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    
    Args:
        user_id: User ID / ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True if deleted successfully / True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        user_sessions_key = f"{REDIS_PREFIXES['user_sessions']}{user_id}"
        session_tokens = client.smembers(user_sessions_key)
        
        # Delete all session keys / –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π
        for token in session_tokens:
            session_key = f"{REDIS_PREFIXES['session']}{token}"
            client.delete(session_key)
        
        # Delete user sessions set / –£–¥–∞–ª—è–µ–º –Ω–∞–±–æ—Ä —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client.delete(user_sessions_key)
        
        return True
    except Exception as e:
        logging.error(f"‚ùå Error deleting user sessions from Redis: {e}")
        return False

# ============================================================================
# CACHING FUNCTIONS / –§–£–ù–ö–¶–ò–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

def cache_set(key: str, value: Any, ttl: int = None, prefix: str = 'cache') -> bool:
    """
    Set cache value in Redis / –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫—ç—à–∞ –≤ Redis
    
    Args:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        value: Value to cache / –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        ttl: Time to live in seconds / –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        prefix: Key prefix / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
    
    Returns:
        bool: True if cached successfully / True –µ—Å–ª–∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        cache_key = f"{REDIS_PREFIXES[prefix]}{key}"
        ttl = ttl or CACHE_TTL.get(prefix, 300)  # Default 5 minutes
        
        if isinstance(value, (dict, list)):
            value = json.dumps(value, ensure_ascii=False)
        
        client.setex(cache_key, ttl, value)
        return True
    except Exception as e:
        logging.error(f"‚ùå Error setting cache in Redis: {e}")
        return False

def cache_get(key: str, prefix: str = 'cache') -> Optional[Any]:
    """
    Get cache value from Redis / –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ Redis
    
    Args:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        prefix: Key prefix / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
    
    Returns:
        Optional[Any]: Cached value or None / –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
    """
    if not redis_manager.is_available():
        return None
    
    try:
        client = redis_manager.get_client()
        if not client:
            return None
        
        cache_key = f"{REDIS_PREFIXES[prefix]}{key}"
        value = client.get(cache_key)
        
        if value is not None:
            # Try to parse as JSON / –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            try:
                return json.loads(value)
            except (json.JSONDecodeError, TypeError):
                return value
        
        return None
    except Exception as e:
        logging.error(f"‚ùå Error getting cache from Redis: {e}")
        return None

def cache_delete(key: str, prefix: str = 'cache') -> bool:
    """
    Delete cache value from Redis / –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ Redis
    
    Args:
        key: Cache key / –ö–ª—é—á –∫—ç—à–∞
        prefix: Key prefix / –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
    
    Returns:
        bool: True if deleted successfully / True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        cache_key = f"{REDIS_PREFIXES[prefix]}{key}"
        client.delete(cache_key)
        return True
    except Exception as e:
        logging.error(f"‚ùå Error deleting cache from Redis: {e}")
        return False

# ============================================================================
# UTILITY FUNCTIONS / –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def get_redis_info() -> Dict[str, Any]:
    """
    Get Redis server information / –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ Redis
    
    Returns:
        Dict[str, Any]: Redis server info / –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ Redis
    """
    if not redis_manager.is_available():
        return {'status': 'disconnected', 'error': 'Redis not available'}
    
    try:
        client = redis_manager.get_client()
        if not client:
            return {'status': 'disconnected', 'error': 'No client available'}
        
        info = client.info()
        return {
            'status': 'connected',
            'version': info.get('redis_version'),
            'uptime': info.get('uptime_in_seconds'),
            'connected_clients': info.get('connected_clients'),
            'used_memory': info.get('used_memory_human'),
            'keyspace': info.get('db0', {}).get('keys', 0)
        }
    except Exception as e:
        return {'status': 'error', 'error': str(e)}

def clear_all_cache() -> bool:
    """
    Clear all application cache from Redis / –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ Redis
    
    Returns:
        bool: True if cleared successfully / True –µ—Å–ª–∏ –æ—á–∏—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not redis_manager.is_available():
        return False
    
    try:
        client = redis_manager.get_client()
        if not client:
            return False
        
        # Get all keys with our prefixes / –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –Ω–∞—à–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        keys_to_delete = []
        for prefix in REDIS_PREFIXES.values():
            pattern = f"{prefix}*"
            keys = client.keys(pattern)
            keys_to_delete.extend(keys)
        
        if keys_to_delete:
            client.delete(*keys_to_delete)
        
        return True
    except Exception as e:
        logging.error(f"‚ùå Error clearing cache from Redis: {e}")
        return False

# ============================================================================
# INITIALIZATION / –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

def initialize_redis() -> bool:
    """
    Initialize Redis connection / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    
    Returns:
        bool: True if initialized successfully / True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return redis_manager.connect()

def shutdown_redis():
    """Shutdown Redis connection / –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    redis_manager.disconnect()
