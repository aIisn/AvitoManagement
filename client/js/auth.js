// filename="auth.js"
// –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// Module for managing authentication and registration forms

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï / GLOBAL VARIABLES
// ============================================================================

let currentForm = 'login'; // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ / Current active form
let isProcessing = false; // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ / Processing flag to prevent duplicate submissions
let verificationTimer = null; // –¢–∞–π–º–µ—Ä –¥–ª—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Verification code timer
let verificationStartTime = null; // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Verification start time
let pendingUserEmail = null; // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Pending verification user email

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø / INITIALIZATION
// ============================================================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîê –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ / Initialize all components
    initializeFormSwitcher();
    initializePasswordToggles();
    initializeFormValidation();
    initializeFormSubmissions();
    initializeVerificationForm();
    
    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ');
});

// ============================================================================
// –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –§–û–†–ú / FORM SWITCHER
// ============================================================================

function initializeFormSwitcher() {
    const switchButtons = document.querySelectorAll('.switch-btn');
    const forms = document.querySelectorAll('.auth-form');
    
    switchButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            if (isProcessing) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Prevent switching during processing
            
            const targetForm = this.dataset.form;
            
            if (targetForm === currentForm) return; // –£–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ / Already active
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ / Switch active button
            switchButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã / Switch active form
            forms.forEach(form => {
                form.classList.remove('active');
                if (form.dataset.form === targetForm) {
                    form.classList.add('active');
                }
            });
            
            currentForm = targetForm;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ / Update subtitle
            updateSubtitle(targetForm);
            
            // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ / Clear forms when switching
            clearForms();
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ / Stop verification timer when switching
            if (verificationTimer) {
                clearInterval(verificationTimer);
                verificationTimer = null;
            }
            
            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ñ–æ—Ä–º—É: ${targetForm}`);
        });
    });
}

function updateSubtitle(formType) {
    const subtitle = document.querySelector('.auth-subtitle');
    if (subtitle) {
        if (formType === 'login') {
            subtitle.textContent = '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏';
        } else if (formType === 'register') {
            subtitle.textContent = '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
        } else if (formType === 'verification') {
            subtitle.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        }
    }
}

// ============================================================================
// –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ò –ü–ê–†–û–õ–ï–ô / PASSWORD TOGGLES
// ============================================================================

function initializePasswordToggles() {
    const passwordToggles = document.querySelectorAll('.password-toggle');
    
    passwordToggles.forEach(toggle => {
        toggle.addEventListener('click', function() {
            const targetId = this.dataset.target;
            const passwordInput = document.getElementById(targetId);
            
            if (passwordInput) {
                togglePasswordVisibility(passwordInput, this);
            }
        });
    });
}

function togglePasswordVisibility(input, toggleButton) {
    const icon = toggleButton.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
        toggleButton.title = '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å';
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
        toggleButton.title = '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å';
    }
}

// ============================================================================
// –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú / FORM VALIDATION
// ============================================================================

function initializeFormValidation() {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ / Real-time validation
    const inputs = document.querySelectorAll('.form-input');
    
    inputs.forEach(input => {
        input.addEventListener('blur', function() {
            validateField(this);
        });
        
        input.addEventListener('input', function() {
            clearFieldError(this);
        });
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è / Special validation for password confirmation
    const confirmPasswordInput = document.getElementById('confirmPassword');
    if (confirmPasswordInput) {
        confirmPasswordInput.addEventListener('input', function() {
            validatePasswordConfirmation();
        });
    }
}

function validateField(field) {
    const value = field.value.trim();
    const fieldType = field.type;
    const fieldName = field.name;
    
    clearFieldError(field);
    
    // –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ / General checks
    if (field.hasAttribute('required') && !value) {
        showFieldError(field, '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        return false;
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ / Specific checks
    switch (fieldType) {
        case 'email':
            if (value && !isValidEmail(value)) {
                showFieldError(field, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
                return false;
            }
            break;
        case 'password':
            if (value && !isValidPassword(value)) {
                showFieldError(field, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                return false;
            }
            break;
        case 'text':
            if (fieldName === 'username' && value && !isValidUsername(value)) {
                showFieldError(field, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)');
                return false;
            }
            break;
    }
    
    return true;
}

function validatePasswordConfirmation() {
    const password = document.getElementById('registerPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    
    if (password && confirmPassword && password.value && confirmPassword.value) {
        if (password.value !== confirmPassword.value) {
            showFieldError(confirmPassword, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return false;
        } else {
            clearFieldError(confirmPassword);
        }
    }
    
    return true;
}

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function isValidPassword(password) {
    return password.length >= 6;
}

function isValidUsername(username) {
    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
    return usernameRegex.test(username);
}

function showFieldError(field, message) {
    field.classList.add('error');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ / Remove old error message
    const existingError = field.parentNode.querySelector('.field-error');
    if (existingError) {
        existingError.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ / Add new error message
    const errorElement = document.createElement('div');
    errorElement.className = 'field-error';
    errorElement.textContent = message;
    errorElement.style.cssText = 'color: #dc3545; font-size: 12px; margin-top: 5px; font-weight: 500;';
    
    field.parentNode.appendChild(errorElement);
}

function clearFieldError(field) {
    field.classList.remove('error');
    const errorElement = field.parentNode.querySelector('.field-error');
    if (errorElement) {
        errorElement.remove();
    }
}

// ============================================================================
// –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú / FORM SUBMISSIONS
// ============================================================================

function initializeFormSubmissions() {
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    
    if (loginForm) {
        loginForm.addEventListener('submit', handleLoginSubmit);
    }
    
    if (registerForm) {
        registerForm.addEventListener('submit', handleRegisterSubmit);
    }
}

function handleLoginSubmit(e) {
    e.preventDefault();
    
    if (isProcessing) return;
    
    const formData = new FormData(e.target);
    const username = formData.get('username');
    const password = formData.get('password');
    const rememberMe = formData.get('rememberMe');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è / Validation
    if (!validateLoginForm(username, password)) {
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ / Show loading indicator
    setProcessingState(true);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä / Send request to server
    apiLogin(username, password)
        .then(response => {
            showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success');
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', response);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ / Save user data and session token
            if (response.user) {
                localStorage.setItem('user', JSON.stringify(response.user));
            }
            
            if (response.session_token) {
                localStorage.setItem('session_token', response.session_token);
            }
            
            // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / Redirect to main app
            setTimeout(() => {
                window.location.href = '/';
            }, 1500);
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        })
        .finally(() => {
            setProcessingState(false);
        });
}

function handleRegisterSubmit(e) {
    e.preventDefault();
    
    if (isProcessing) return;
    
    const formData = new FormData(e.target);
    const username = formData.get('username');
    const email = formData.get('email');
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');
    const agreeTerms = formData.get('agreeTerms');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è / Validation
    if (!validateRegisterForm(username, email, password, confirmPassword, agreeTerms)) {
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ / Show loading indicator
    setProcessingState(true);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä / Send request to server
    apiRegister(username, email, password)
        .then(response => {
            showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.', 'success');
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', response);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Save email for verification
            pendingUserEmail = email;
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Switch to verification form
            switchToVerificationForm(email);
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message, 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        })
        .finally(() => {
            setProcessingState(false);
        });
}

function validateLoginForm(username, password) {
    let isValid = true;
    
    if (!username || !username.trim()) {
        showFieldError(document.getElementById('loginUsername'), '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        isValid = false;
    }
    
    if (!password || !password.trim()) {
        showFieldError(document.getElementById('loginPassword'), '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    }
    
    return isValid;
}

function validateRegisterForm(username, email, password, confirmPassword, agreeTerms) {
    let isValid = true;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / Username validation
    if (!username || !username.trim()) {
        showFieldError(document.getElementById('registerUsername'), '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        isValid = false;
    } else if (!isValidUsername(username)) {
        showFieldError(document.getElementById('registerUsername'), '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _)');
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è email / Email validation
    if (!email || !email.trim()) {
        showFieldError(document.getElementById('registerEmail'), '–í–≤–µ–¥–∏—Ç–µ email');
        isValid = false;
    } else if (!isValidEmail(email)) {
        showFieldError(document.getElementById('registerEmail'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è / Password validation
    if (!password || !password.trim()) {
        showFieldError(document.getElementById('registerPassword'), '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    } else if (!isValidPassword(password)) {
        showFieldError(document.getElementById('registerPassword'), '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è / Password confirmation validation
    if (!confirmPassword || !confirmPassword.trim()) {
        showFieldError(document.getElementById('confirmPassword'), '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        isValid = false;
    } else if (password !== confirmPassword) {
        showFieldError(document.getElementById('confirmPassword'), '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        isValid = false;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ / Terms agreement validation
    if (!agreeTerms) {
        showNotification('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', 'error');
        isValid = false;
    }
    
    return isValid;
}

// ============================================================================
// –°–ò–ú–£–õ–Ø–¶–ò–Ø API / API SIMULATION
// ============================================================================

// ============================================================================
// API –§–£–ù–ö–¶–ò–ò / API FUNCTIONS
// ============================================================================

async function apiLogin(username, password) {
    const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            username: username,
            password: password
        })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    return data;
}

async function apiRegister(username, email, password) {
    const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            username: username,
            email: email,
            password: password
        })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
    
    return data;
}

async function apiVerifyEmail(email, code) {
    const response = await fetch('/api/auth/verify', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: email,
            code: code
        })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
    
    return data;
}

async function apiResendVerificationCode(email) {
    const response = await fetch('/api/auth/resend-code', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            email: email
        })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
    }
    
    return data;
}

// ============================================================================
// –§–û–†–ú–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò / VERIFICATION FORM
// ============================================================================

function initializeVerificationForm() {
    const verificationForm = document.getElementById('verificationForm');
    const resendCodeBtn = document.getElementById('resendCodeBtn');
    const backToRegisterBtn = document.getElementById('backToRegisterBtn');
    
    if (verificationForm) {
        verificationForm.addEventListener('submit', handleVerificationSubmit);
    }
    
    if (resendCodeBtn) {
        resendCodeBtn.addEventListener('click', handleResendCode);
    }
    
    if (backToRegisterBtn) {
        backToRegisterBtn.addEventListener('click', handleBackToRegister);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –∫–æ–¥–∞ / Auto code input
    const verificationCodeInput = document.getElementById('verificationCode');
    if (verificationCodeInput) {
        verificationCodeInput.addEventListener('input', function(e) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ / Auto submit on 6 characters
            if (e.target.value.length === 6) {
                setTimeout(() => {
                    verificationForm.dispatchEvent(new Event('submit'));
                }, 500);
            }
        });
    }
}

function switchToVerificationForm(email) {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ñ–æ—Ä–º / Hide form switcher
    const formSwitcher = document.querySelector('.form-switcher');
    if (formSwitcher) {
        formSwitcher.style.display = 'none';
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Switch to verification form
    const forms = document.querySelectorAll('.auth-form');
    forms.forEach(form => {
        form.classList.remove('active');
        if (form.dataset.form === 'verification') {
            form.classList.add('active');
        }
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º email / Fill email
    const verificationEmailInput = document.getElementById('verificationEmail');
    if (verificationEmailInput) {
        verificationEmailInput.value = email;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ / Update subtitle
    updateSubtitle('verification');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä / Start timer
    startVerificationTimer();
    
    currentForm = 'verification';
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ñ–æ—Ä–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
}

function handleVerificationSubmit(e) {
    e.preventDefault();
    
    if (isProcessing) return;
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const code = formData.get('code');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è / Validation
    if (!email || !code) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (code.length !== 6) {
        showNotification('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ / Show loading indicator
    setProcessingState(true);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä / Send request to server
    apiVerifyEmail(email, code)
        .then(response => {
            showNotification('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success');
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:', response);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä / Stop timer
            if (verificationTimer) {
                clearInterval(verificationTimer);
                verificationTimer = null;
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ / Switch to login form
            setTimeout(() => {
                switchToForm('login');
                // –û—á–∏—â–∞–µ–º email –∏–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ / Clear email from login form
                const loginUsernameInput = document.getElementById('loginUsername');
                if (loginUsernameInput) {
                    loginUsernameInput.value = email;
                }
            }, 2000);
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + error.message, 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        })
        .finally(() => {
            setProcessingState(false);
        });
}

function handleResendCode() {
    if (isProcessing || !pendingUserEmail) return;
    
    setProcessingState(true);
    
    apiResendVerificationCode(pendingUserEmail)
        .then(response => {
            showNotification('–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email', 'success');
            console.log('‚úÖ –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response);
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä / Restart timer
            startVerificationTimer();
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: ' + error.message, 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        })
        .finally(() => {
            setProcessingState(false);
        });
}

function handleBackToRegister() {
    if (isProcessing) return;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä / Stop timer
    if (verificationTimer) {
        clearInterval(verificationTimer);
        verificationTimer = null;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ñ–æ—Ä–º / Show form switcher
    const formSwitcher = document.querySelector('.form-switcher');
    if (formSwitcher) {
        formSwitcher.style.display = 'flex';
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / Switch to register form
    switchToForm('register');
    
    // –û—á–∏—â–∞–µ–º email / Clear email
    pendingUserEmail = null;
}

function startVerificationTimer() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä / Stop previous timer
    if (verificationTimer) {
        clearInterval(verificationTimer);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ / Set start time
    verificationStartTime = Date.now();
    const expiryTime = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö / 24 hours in milliseconds
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É / Update timer every second
    verificationTimer = setInterval(() => {
        const elapsed = Date.now() - verificationStartTime;
        const remaining = expiryTime - elapsed;
        
        if (remaining <= 0) {
            clearInterval(verificationTimer);
            verificationTimer = null;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ / Show expiry message
            showNotification('–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.', 'warning');
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / Disable verification button
            const verifyButton = document.querySelector('#verificationForm .auth-button');
            if (verifyButton) {
                verifyButton.disabled = true;
            }
            
            return;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è / Format remaining time
        const hours = Math.floor(remaining / (1000 * 60 * 60));
        const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((remaining % (1000 * 60)) / 1000);
        
        const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ / Update timer display
        const timerElement = document.getElementById('timer');
        if (timerElement) {
            timerElement.textContent = timeString;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏ / Add warning for low time
            const timerContainer = timerElement.closest('.verification-timer');
            if (remaining < 5 * 60 * 1000) { // –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç / Less than 5 minutes
                timerContainer.classList.add('warning');
            } else {
                timerContainer.classList.remove('warning');
            }
        }
    }, 1000);
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ / UTILITIES
// ============================================================================

function setProcessingState(processing) {
    isProcessing = processing;
    
    const buttons = document.querySelectorAll('.auth-button');
    buttons.forEach(button => {
        if (processing) {
            button.classList.add('loading');
            button.disabled = true;
        } else {
            button.classList.remove('loading');
            button.disabled = false;
        }
    });
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ñ–æ—Ä–º / Block form switchers
    const switchButtons = document.querySelectorAll('.switch-btn');
    switchButtons.forEach(button => {
        button.disabled = processing;
    });
}

function switchToForm(formType) {
    const switchButton = document.querySelector(`[data-form="${formType}"]`);
    if (switchButton) {
        switchButton.click();
    }
}

function clearForms() {
    const forms = document.querySelectorAll('.auth-form');
    forms.forEach(form => {
        form.reset();
        
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ / Clear errors
        const inputs = form.querySelectorAll('.form-input');
        inputs.forEach(input => clearFieldError(input));
    });
}

function showNotification(message, type = 'info') {
    const container = document.getElementById('notificationContainer');
    if (!container) return;
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas ${getNotificationIcon(type)}"></i>
            <span>${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è / Add notification styles
    notification.style.cssText = `
        background: ${getNotificationColor(type)};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        animation: slideInRight 0.3s ease;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
    `;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ / Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

function getNotificationIcon(type) {
    const icons = {
        success: 'fa-check-circle',
        error: 'fa-exclamation-circle',
        warning: 'fa-exclamation-triangle',
        info: 'fa-info-circle'
    };
    return icons[type] || icons.info;
}

function getNotificationColor(type) {
    const colors = {
        success: 'linear-gradient(135deg, #28a745 0%, #20c997 100%)',
        error: 'linear-gradient(135deg, #dc3545 0%, #fd7e14 100%)',
        warning: 'linear-gradient(135deg, #ffc107 0%, #fd7e14 100%)',
        info: 'linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%)'
    };
    return colors[type] || colors.info;
}

// ============================================================================
// –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –î–û–°–¢–£–ü–ê / EXPORT FUNCTIONS FOR GLOBAL ACCESS
// ============================================================================

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / Make functions globally available for debugging
window.AuthModule = {
    switchToForm,
    clearForms,
    showNotification,
    validateField,
    setProcessingState
};
