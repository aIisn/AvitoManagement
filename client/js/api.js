// filename="api.js"
// –ú–æ–¥—É–ª—å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º (API)
// Module for all server operations (API)

// ============================================================================
// –ò–ú–ü–û–†–¢–´ / IMPORTS
// ============================================================================

import { currentManager, currentUniquifyCategory, isProcessing, setIsProcessing, setCurrentPath } from './state.js';
import { renderCard, renderResultsTable } from './ui.js';

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–ê–ú–ò / LOG FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
// Function to fetch and display logs from server
export async function fetchLogs(manager = null) {
    const response = await fetch('/api/logs');
    const data = await response.json();
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ / Find element to display logs
    const logsElement = document.getElementById(`logs-${manager || 'global'}`);
    if (logsElement) {
        logsElement.textContent = data.logs.join('\n');
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–û–ô / FILE SYSTEM FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –ø–∞–ø–æ–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// Function to fetch and display folder grid for manager
export async function fetchManagerGrid(manager, gridId, path = '', dir_type = 'photo_cache') {
    if (isProcessing) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ / Prevent duplicate calls
    setIsProcessing(true);
    try {
        setCurrentPath(manager, path);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ / Fetch files and folders list
        const response = await fetch(`/api/list?manager=${manager}&dir=${dir_type}&path=${path}`);
        const data = await response.json();
        const grid = document.getElementById(gridId);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ—Ä–Ω—è photo_cache: –ø–∞—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ready_photos
        // Special logic for photo_cache root: paired display with ready_photos
        if (path === '' && dir_type === 'photo_cache') {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ / Filter directories only
            const photo_dirs = data.children.filter(node => node.type === 'dir');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ / Fetch ready photos list
            const ready_response = await fetch(`/api/list?manager=${manager}&dir=ready_photos&path=`);
            const ready_data = await ready_response.json();
            const ready_map = new Map(ready_data.children.filter(node => node.type === 'dir').map(node => [node.name, node]));
            
            // –ï–¥–∏–Ω—ã–π fetch –¥–ª—è –≤—Å–µ—Ö counts / Single fetch for all counts
            const count_response = await fetch(`/api/count_ready?manager=${manager}`);
            const count_data = await count_response.json();
            const countMap = new Map(Object.entries(count_data.counts || {}));
            
            grid.innerHTML = '';
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ / Display each photo folder
            for (const photo_node of photo_dirs) {
                const row = document.createElement('div');
                row.classList.add('card-row');
                renderCard(photo_node, row, manager, path, 'photo_cache');
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑—å / If ready photos exist, show link
                if (ready_map.has(photo_node.name)) {
                    row.classList.add('linked'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±–≤–æ–¥–∫–∏ / Add class for border
                    const chain = document.createElement('span');
                    chain.classList.add('chain-icon');
                    chain.textContent = 'üîó';
                    row.appendChild(chain);
                    
                    const category_path = photo_node.name;
                    const unique_node = {
                        name: photo_node.name,
                        type: 'dir-unique',
                        path: category_path,
                        count: countMap.get(category_path) || 0
                    };
                    renderCard(unique_node, row, manager, path, 'ready_photos');
                }
                grid.appendChild(row);
            }
        } else {
            // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏–ª–∏ ready_photos
            // Standard logic for subdirectories or ready_photos
            grid.innerHTML = '';
            data.children.forEach(node => renderCard(node, grid, manager, path, dir_type));
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∫–∏ –¥–ª—è ${manager}:`, error);
    } finally {
        setIsProcessing(false);
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ / Show logo upload section
    document.getElementById('logo-upload-section').style.display = 'block';
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–û–¢–ò–ü–û–ú / LOGO FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// Function to upload logo for manager
export async function uploadLogo(manager) {
    const fileInput = document.getElementById('logo-input');
    const file = fileInput.files[0];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ / Check file selection
    if (!file) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞');
        return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ / Prepare data for sending
    const formData = new FormData();
    formData.append('manager', manager);
    formData.append('logo', file);
    
    try {
        const response = await fetch('/api/upload_logo', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        
        if (data.success) {
            alert('–õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        } else {
            alert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–ò / UNIQUIFICATION FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
// Function to start photo uniquification process
export async function startUniquify() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ / Get uniquification parameters
    const count = parseInt(document.getElementById('ad-count').value);
    const useRotation = document.getElementById('use-rotation').checked;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è / Validation
    if (count < 1) {
        alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1');
        return;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ / Close modal window
    const { closeUniquifyModal } = await import('./ui.js');
    closeUniquifyModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ / Show progress indicator
    const progressDiv = document.createElement('div');
    progressDiv.innerHTML = '<p>–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</p>';
    document.getElementById(`grid-${currentManager}`).after(progressDiv);
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä / Send request to server
        const response = await fetch('/api/uniquify', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                manager: currentManager,
                folder_name: currentUniquifyCategory,
                count: count,
                use_rotation: useRotation
            })
        });
        const data = await response.json();
        
        if (data.success) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã / Display results
            renderResultsTable(data.results, currentManager);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∞–ø–æ–∫ / Refresh folder grid
            await fetchManagerGrid(currentManager, `grid-${currentManager}`);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ / Remove progress indicator
        progressDiv.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
// Function to fetch links for uniquified ads
export async function fetchLinks(manager, category) {
    try {
        const response = await fetch(`/api/get_links?manager=${manager}&category=${category}`);
        const data = await response.json();
        
        if (data.success) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ / Display links in table
            renderResultsTable(data.results, manager);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê–ú–ò / MANAGER MANAGEMENT FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// Function to create new manager
export async function createManager() {
    const name = document.getElementById('manager-name').value.trim();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ / Validate name
    if (!name) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
        return;
    }
    
    try {
        const response = await fetch('/api/create-manager', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({name})
        });
        const data = await response.json();
        
        if (data.success) {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ / Clear input field
            document.getElementById('manager-name').value = '';
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ / Refresh managers list
            await fetchManagers();
        } else {
            alert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
// Function to fetch and display list of all managers
export async function fetchManagers() {
    try {
        const response = await fetch('/api/managers');
        const managers = await response.json();
        const list = document.getElementById('manager-list');
        list.innerHTML = '';
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UI —Ñ—É–Ω–∫—Ü–∏–∏ / Import UI functions
        const { loadManagerContent, showEditManagerModal } = await import('./ui.js');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ / Display each manager
        managers.forEach(manager => {
            const item = document.createElement('li');
            item.classList.add('manager-item');
            
            // –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ) / Manager name (clickable)
            const nameSpan = document.createElement('span');
            nameSpan.textContent = manager;
            nameSpan.onclick = () => loadManagerContent(manager);
            item.appendChild(nameSpan);
            
            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Edit button
            const editBtn = document.createElement('button');
            editBtn.classList.add('edit-btn');
            editBtn.innerHTML = '‚úèÔ∏è';
            editBtn.onclick = (e) => {
                e.stopPropagation();
                showEditManagerModal(manager);
            };
            item.appendChild(editBtn);
            list.appendChild(item);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// Function to save changes when editing manager
export async function saveManagerEdit() {
    const { currentEditManager, currentManager, setCurrentManager } = await import('./state.js');
    const { closeEditModal, loadManagerContent } = await import('./ui.js');
    const newName = document.getElementById('edit-manager-name').value.trim();
    
    // –ï—Å–ª–∏ –∏–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª / If name unchanged, just close modal
    if (!newName || newName === currentEditManager) {
        closeEditModal();
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è / Confirm renaming
    if (confirm(`–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '${currentEditManager}' –≤ '${newName}'?`)) {
        try {
            const response = await fetch('/api/rename-manager', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({old_name: currentEditManager, new_name: newName})
            });
            const data = await response.json();
            
            if (data.success) {
                closeEditModal();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ / Refresh managers list
                await fetchManagers();
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                // If renamed manager was active, update content
                if (currentManager === currentEditManager) {
                    loadManagerContent(newName);
                    setCurrentManager(newName);
                }
            } else {
                alert(`–û—à–∏–±–∫–∞: ${data.error}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// Function to confirm and execute manager deletion
export async function deleteManagerConfirm() {
    const { currentEditManager, currentManager, setCurrentManager } = await import('./state.js');
    const { closeEditModal } = await import('./ui.js');
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ) / Confirm deletion (irreversible action)
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '${currentEditManager}' –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        try {
            const response = await fetch('/api/delete-manager', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({name: currentEditManager})
            });
            const data = await response.json();
            
            if (data.success) {
                closeEditModal();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ / Refresh managers list
                await fetchManagers();
                
                // –ï—Å–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º, –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                // If deleted manager was active, clear content
                if (currentManager === currentEditManager) {
                    document.getElementById('manager-content').innerHTML = '';
                    setCurrentManager(null);
                }
            } else {
                alert(`–û—à–∏–±–∫–∞: ${data.error}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ / MAIN PAGE FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// Function to fetch managers for main page
export async function fetchManagersForMain() {
    try {
        const response = await fetch('/api/managers');
        const managers = await response.json();
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UI —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ / Import UI function for rendering
        const { renderManagerCards } = await import('./ui.js');
        renderManagerCards(managers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
}

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö / FOLDER STRUCTURE FUNCTIONS
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
// Function to create folder structure and upload files
export async function createFolderStructure(manager, categoryName) {
    const { isProcessing, setIsProcessing, selectedFiles } = await import('./state.js');
    if (isProcessing) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ / Prevent duplicate calls
    setIsProcessing(true);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ DOM / Get all positions from DOM
    const positions = Array.from(document.querySelectorAll(`#position-row-${manager} .position-tile`)).map(tile => tile.dataset.position);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ / Get progress bar elements
    const createButton = document.getElementById('create-button');
    const progressContainer = document.getElementById('progress-container');
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ / Setup UI for progress display
    createButton.disabled = true;
    progressContainer.style.display = 'block';
    progressText.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...';
    progressFill.style.width = '0%';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å / Initialize progress
    let currentProgress = 0;
    const totalSteps = positions.length * 2 + 1; // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ + –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ + —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è / Create folders + upload files + finalization
    try {
        // –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ / STEP 1: Create folder structure on server
        progressText.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...';
        const folderResponse = await fetch('/api/create-folder-structure', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({manager, category: categoryName, positions})
        });
        const folderData = await folderResponse.json();
        
        if (!folderData.success) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${folderData.error}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å / Update progress
        currentProgress += 100 / totalSteps;
        progressFill.style.width = `${currentProgress}%`;
        
        // –®–ê–ì 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ / STEP 2: Upload files for each position
        let uploadSuccess = true;
        for (let pos of positions) {
            progressText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${pos}...`;
            const files = selectedFiles[manager][pos] || [];
            
            if (files.length > 0) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º multipart/form-data –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ / Prepare multipart/form-data for upload
                const formData = new FormData();
                formData.append('manager', manager);
                formData.append('category', categoryName);
                formData.append('position', pos);
                
                for (let file of files) {
                    formData.append('files', file);
                }
                
                try {
                    const uploadResponse = await fetch('/api/upload', {
                        method: 'POST',
                        body: formData
                    });
                    const uploadData = await uploadResponse.json();
                    
                    if (!uploadData.success) {
                        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${pos}: ${uploadData.error}`);
                        uploadSuccess = false;
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${pos}:`, error);
                    uploadSuccess = false;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ / Update progress after each position
            currentProgress += 100 / totalSteps;
            progressFill.style.width = `${Math.min(currentProgress, 100)}%`;
        }
        
        // –®–ê–ì 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ / STEP 3: Finalization
        progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...';
        await new Promise(resolve => setTimeout(resolve, 500));
        progressFill.style.width = '100%';
        
        const { closeModal, initPositionRow } = await import('./ui.js');
        const { resetManagerState } = await import('./state.js');
        closeModal();
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è / Handle successful completion
        if (uploadSuccess) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø–∞–ø–æ–∫ / Refresh folder grid
            await fetchManagerGrid(manager, `grid-${manager}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ / Show success notification
            const successDiv = document.createElement('div');
            successDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #28a745;
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
                z-index: 1001;
                animation: slideInRight 0.5s ease;
                font-weight: 500;
            `;
            const totalFiles = positions.reduce((sum, pos) => sum + (selectedFiles[manager][pos] ? selectedFiles[manager][pos].length : 0), 0);
            successDiv.innerHTML = `
                ‚úÖ <strong>–£—Å–ø–µ—à–Ω–æ!</strong><br>
                –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ ${totalFiles} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            `;
            document.body.appendChild(successDiv);
            setTimeout(() => successDiv.remove(), 5000);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É / Clear form
            document.getElementById(`category-name-${manager}`).value = '';
            document.querySelectorAll(`#position-row-${manager} .thumbnail-container`).forEach(c => c.innerHTML = '');
            document.querySelectorAll(`#position-row-${manager} .position-tile`).forEach(t => {
                const badge = t.querySelector('.count-badge');
                if (badge) badge.remove();
            });
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ / Reset state
            resetManagerState(manager);
            
            // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–Ω–æ–≤–æ / Recreate first position
            document.getElementById(`position-row-${manager}`).innerHTML = `
                <div class="position-tile active" data-position="1">
                    <button class="clear-photos" onclick="clearPhotos(1, '${manager}')" title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏">üßπ</button>
                    <button class="delete-position" onclick="deletePosition(1, '${manager}')" title="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é">üóëÔ∏è</button>
                    <div class="tile-header">
                        <div class="position-number">1</div>
                        <div class="position-label">–§–æ—Ç–æ –¥–ª—è 1-–π –ø–æ–∑–∏—Ü–∏–∏</div>
                    </div>
                    <div class="thumbnail-container" id="thumbnails-1-${manager}"></div>
                    <button class="upload-button" onclick="openFileInput(1, '${manager}')">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</button>
                    <input type="file" multiple class="file-input" accept="image/*" style="display: none;">
                </div>
            `;
            initPositionRow(manager);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
            // Handle partial success (structure created but upload errors)
            const warningDiv = document.createElement('div');
            warningDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #ffc107;
                color: #333;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
                z-index: 1001;
                animation: slideInRight 0.5s ease;
                font-weight: 500;
            `;
            warningDiv.innerHTML = `
                ‚ö†Ô∏è <strong>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</strong><br>
                –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.
            `;
            document.body.appendChild(warningDiv);
            setTimeout(() => warningDiv.remove(), 5000);
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ / Handle critical errors
        console.error('–û—à–∏–±–∫–∞ –≤ createFolderStructure:', error);
        progressText.textContent = '–û—à–∏–±–∫–∞!';
        progressFill.style.background = '#dc3545';
        
        const { closeModal } = await import('./ui.js');
        setTimeout(() => {
            closeModal();
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }, 1500);
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É / Always remove lock
        setIsProcessing(false);
    }
}

