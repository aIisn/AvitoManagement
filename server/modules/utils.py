# server/modules/utils.py
# Utility functions for the AvitoManagement server / –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ AvitoManagement
# Updated: removed global variables BLOCKED_IPS and IP_REQUEST_COUNTS, removed blocking logic by request count in is_suspicious_request, removed clean_blocked_ips function
# –û–±–Ω–æ–≤–ª—ë–Ω: —É–¥–∞–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BLOCKED_IPS –∏ IP_REQUEST_COUNTS, —É–¥–∞–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ is_suspicious_request, —É–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è clean_blocked_ips

"""
Utilities Module / –ú–æ–¥—É–ª—å —É—Ç–∏–ª–∏—Ç

This module provides helper functions for logging, timestamp generation, request validation, and file validation.
–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.
"""

import pytz
from datetime import datetime
import os

def get_timestamp():
    """
    Get current timestamp in Moscow timezone / –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    
    Returns:
        str: Formatted timestamp string in "YYYY-MM-DD HH:MM:SS" format / –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD HH:MM:SS"
    """
    tz = pytz.timezone('Europe/Moscow')
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def log_message(message):
    """
    Log message with timestamp to console and file / –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
    
    Args:
        message (str): Message to log / –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    The function:
    - Adds timestamp to the message / –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    - Prints to console / –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    - Appends to log file 'logs/main.txt' / –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ª–æ–≥-—Ñ–∞–π–ª 'logs/main.txt'
    """
    timestamp = get_timestamp()
    log_entry = f"{timestamp} - {message}"
    print(log_entry)
    
    # Create logs directory if it doesn't exist / –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
    os.makedirs(log_dir, exist_ok=True)
    
    # Append log entry to main.txt / –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ main.txt
    log_path = os.path.join(log_dir, 'main.txt')
    with open(log_path, "a", encoding="utf-8") as f:
        f.write(log_entry + "\n")

def is_suspicious_request():
    """
    Check if current request is suspicious / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
    
    Returns:
        bool: True if request is suspicious, False otherwise / True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    
    Checks performed / –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - User-Agent validation (must contain browser signatures) / –í–∞–ª–∏–¥–∞—Ü–∏—è User-Agent (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–ø–∏—Å–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤)
    - HTTP method validation (only GET, POST, HEAD, OPTIONS allowed) / –í–∞–ª–∏–¥–∞—Ü–∏—è HTTP-–º–µ—Ç–æ–¥–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ GET, POST, HEAD, OPTIONS)
    - Skips validation for /api/logs endpoint / –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/logs
    """
    # Import inside function to avoid circular imports / –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from flask import request
    
    client_ip = request.remote_addr
    user_agent = request.headers.get('User-Agent', '')
    method = request.method
    
    # Skip validation for logs API / –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è API –ª–æ–≥–æ–≤
    if request.path == '/api/logs':
        return False
    
    # Check if User-Agent contains known browser signatures / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ User-Agent –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    if not any(ua in user_agent for ua in ['Mozilla/5.0', 'Chrome/', 'Safari/', 'Firefox/', 'Edge/']):
        log_message(f"üö´ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent –æ—Ç {client_ip}: {user_agent[:100]}")
        return True
    
    # Check if HTTP method is allowed / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ HTTP-–º–µ—Ç–æ–¥
    if method not in ['GET', 'POST', 'HEAD', 'OPTIONS']:
        log_message(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ {method} –æ—Ç {client_ip}")
        return True
    
    return False

def allowed_file(filename):
    """
    Check if file has allowed extension / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–º–µ–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    
    Args:
        filename (str): Name of the file to check / –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        bool: True if file extension is allowed (jpg, jpeg, png), False otherwise / True –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ (jpg, jpeg, png), False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ("jpg", "jpeg", "png")